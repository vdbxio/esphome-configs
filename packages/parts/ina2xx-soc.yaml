# INA2XX State of Charge (SoC) via Amp-Hour Integration
# Voidbox Industries & Chloe Madison
# VDBX.io / @clomads
# CC-BY-SA 4.0
#
# Usage: !include {file: "packages/parts/ina2xx-soc.yaml", vars: {current_id: rawI}}

esphome:
  # This is a package file for SoC calculation, intended for inclusion
  # No device-specific config here

substitutions:
  current_id: "rawI"           # The ID of the current sensor (A)
  soc_min: "0.0"
  soc_max: "100.0"
select:
  - platform: template
    id: mode_select
    name: "Mode"
    optimistic: true
    restore_value: yes
    entity_category: config
    options:
      - "Battery Monitor - Bidirectional"
      - "DC Load or Charger - Unidirectional"

number:
  - platform: template
    id: soc_capacity_ah_num
    name: "Capacity - Ah"
    initial_value: 100.0
    min_value: 0.0
    max_value: 1000.0
    step: 0.1
    optimistic: true
    restore_value: yes
    device_class: "energy"
    unit_of_measurement: "Ah"
    entity_category: config

globals:
  - id: soc_percent
    type: float
    restore_value: yes
    initial_value: '100.0'
  - id: current_charge_ah
    type: float
    restore_value: yes
    initial_value: '100.0'

sensor:
  # Template sensors for filtered current and power
  - platform: template
    id: current_in
    name: "Current In"
    lambda: |-
      return id(rawI).state > 0.0 ? id(rawI).state : 0.0;
    update_interval: 1s
    entity_category: diagnostic
    device_class: "current"
    unit_of_measurement: "A"
    state_class: "measurement"
    accuracy_decimals: 2
  - platform: template
    id: current_out
    name: "Current Out"
    lambda: |-
      return id(rawI).state < 0.0 ? -id(rawI).state : 0.0;
    update_interval: 1s
    entity_category: diagnostic
    device_class: "current"
    unit_of_measurement: "A"
    state_class: "measurement"
    accuracy_decimals: 2
  - platform: template
    id: power_in
    name: "Power In"
    lambda: |-
      return id(rawP).state > 0.0 ? id(rawP).state : 0.0;
    update_interval: 1s
    entity_category: diagnostic
    device_class: "power"
    unit_of_measurement: "W"
    state_class: "measurement"
    accuracy_decimals: 2
  - platform: template
    id: power_out
    name: "Power Out"
    lambda: |-
      return id(rawP).state < 0.0 ? -id(rawP).state : 0.0;
    update_interval: 1s
    entity_category: diagnostic
    device_class: "power"
    unit_of_measurement: "W"
    state_class: "measurement"
    accuracy_decimals: 2
  # Integration sensors for charge/power in/out
  - platform: integration
    name: "Charge In"
    id: soc_charge_in_ah
    sensor: current_in
    time_unit: h
    accuracy_decimals: 3
    unit_of_measurement: "Ah"
    restore: true
    entity_category: diagnostic
  - platform: integration
    name: "Charge Out"
    id: soc_discharge_out_ah
    sensor: current_out
    time_unit: h
    accuracy_decimals: 3
    unit_of_measurement: "Ah"
    restore: true
    entity_category: diagnostic
  - platform: integration
    name: "Energy In"
    id: soc_power_in_wh
    sensor: power_in
    time_unit: h
    accuracy_decimals: 2
    unit_of_measurement: "Wh"
    restore: true
    entity_category: diagnostic
  - platform: integration
    name: "Energy Out"
    id: soc_power_out_wh
    sensor: power_out
    time_unit: h
    accuracy_decimals: 2
    unit_of_measurement: "Wh"
    restore: true
    entity_category: diagnostic

  # Net integration sensor for SoC math (delta since last reset)
  - platform: integration
    name: "Net Charge Delta"
    id: net_ah
    sensor: ${current_id}
    time_unit: h
    accuracy_decimals: 3
    unit_of_measurement: "Ah"
    restore: true
    on_value:
      - lambda: |-
          // Update current charge: full - net discharge
          id(current_charge_ah) = id(soc_capacity_ah_num).state + x;
          float percent = 100.0 * (id(current_charge_ah) / id(soc_capacity_ah_num).state);
          if (percent < ${soc_min}) percent = ${soc_min};
          if (percent > ${soc_max}) percent = ${soc_max};
          id(soc_percent) = percent;
      - sensor.template.publish:
          id: soc_percent_sensor
          state: !lambda 'return id(soc_percent);'
    entity_category: diagnostic

  - platform: template
    id: soc_percent_sensor
    name: "State of Charge (SoC)"
    unit_of_measurement: "%"
    accuracy_decimals: 1
    device_class: "battery"
    state_class: "measurement"
    lambda: 'return id(soc_percent);'
    update_interval: 10s

  - platform: total_daily_energy
    name: "Energy - Daily"
    power_id: rawP
    accuracy_decimals: 2
    entity_category: diagnostic
  - platform: total_daily_energy
    name: "Current - Daily"
    power_id: ${current_id}
    accuracy_decimals: 2
    entity_category: diagnostic

button:
  - platform: template
    name: "Reset SoC to 100%"
    id: soc_reset
    icon: "mdi:battery-sync"
    entity_category: config
    on_press:
      - lambda: |-
          id(current_charge_ah) = id(soc_capacity_ah_num).state;
          id(soc_percent) = 100.0;
      - sensor.integration.reset: net_ah
      - sensor.template.publish:
          id: soc_percent_sensor
          state: 100.0
      - logger.log: "SoC reset to 100%" 